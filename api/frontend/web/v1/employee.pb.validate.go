// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/employee.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetEmptyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetEmptyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmptyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmptyRequestMultiError, or nil if none found.
func (m *GetEmptyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmptyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetEmptyRequestMultiError(errors)
	}

	return nil
}

// GetEmptyRequestMultiError is an error wrapping multiple validation errors
// returned by GetEmptyRequest.ValidateAll() if the designated constraints
// aren't met.
type GetEmptyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmptyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmptyRequestMultiError) AllErrors() []error { return m }

// GetEmptyRequestValidationError is the validation error returned by
// GetEmptyRequest.Validate if the designated constraints aren't met.
type GetEmptyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmptyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmptyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmptyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmptyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmptyRequestValidationError) ErrorName() string { return "GetEmptyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEmptyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmptyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmptyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmptyRequestValidationError{}

// Validate checks the field values on GetBasicRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBasicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBasicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBasicRequestMultiError, or nil if none found.
func (m *GetBasicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBasicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for PoliticId

	// no validation rules for NationId

	// no validation rules for JobLevelId

	// no validation rules for PosId

	// no validation rules for EngageForm

	// no validation rules for DepartmentId

	// no validation rules for BeginDateScope

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return GetBasicRequestMultiError(errors)
	}

	return nil
}

// GetBasicRequestMultiError is an error wrapping multiple validation errors
// returned by GetBasicRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBasicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBasicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBasicRequestMultiError) AllErrors() []error { return m }

// GetBasicRequestValidationError is the validation error returned by
// GetBasicRequest.Validate if the designated constraints aren't met.
type GetBasicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBasicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBasicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBasicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBasicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBasicRequestValidationError) ErrorName() string { return "GetBasicRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBasicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBasicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBasicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBasicRequestValidationError{}

// Validate checks the field values on EmployeeData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmployeeData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmployeeData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmployeeDataMultiError, or
// nil if none found.
func (m *EmployeeData) ValidateAll() error {
	return m.validate(true)
}

func (m *EmployeeData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for WorkId

	// no validation rules for Name

	// no validation rules for Gender

	// no validation rules for Picture

	// no validation rules for IdCard

	// no validation rules for IdCardPicture

	// no validation rules for Wedlock

	// no validation rules for NationId

	// no validation rules for NativePlace

	// no validation rules for PoliticId

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Address

	// no validation rules for DepartmentId

	// no validation rules for JobLevelId

	// no validation rules for PosId

	// no validation rules for EngageForm

	// no validation rules for TiptopDegree

	// no validation rules for Specialty

	// no validation rules for School

	// no validation rules for BeginDate

	// no validation rules for NotWorkDate

	// no validation rules for WorkStatus

	// no validation rules for ContractTerm

	// no validation rules for ConversionTime

	// no validation rules for BeginContract

	// no validation rules for EndContract

	// no validation rules for WorkAge

	if len(errors) > 0 {
		return EmployeeDataMultiError(errors)
	}

	return nil
}

// EmployeeDataMultiError is an error wrapping multiple validation errors
// returned by EmployeeData.ValidateAll() if the designated constraints aren't met.
type EmployeeDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmployeeDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmployeeDataMultiError) AllErrors() []error { return m }

// EmployeeDataValidationError is the validation error returned by
// EmployeeData.Validate if the designated constraints aren't met.
type EmployeeDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeDataValidationError) ErrorName() string { return "EmployeeDataValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployeeData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeDataValidationError{}

// Validate checks the field values on EmployeeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmployeeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmployeeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmployeeReplyMultiError, or
// nil if none found.
func (m *EmployeeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EmployeeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EmployeeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EmployeeReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EmployeeReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EmployeeReplyMultiError(errors)
	}

	return nil
}

// EmployeeReplyMultiError is an error wrapping multiple validation errors
// returned by EmployeeReply.ValidateAll() if the designated constraints
// aren't met.
type EmployeeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmployeeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmployeeReplyMultiError) AllErrors() []error { return m }

// EmployeeReplyValidationError is the validation error returned by
// EmployeeReply.Validate if the designated constraints aren't met.
type EmployeeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeReplyValidationError) ErrorName() string { return "EmployeeReplyValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployeeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeReplyValidationError{}

// Validate checks the field values on GetNationsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetNationsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNationsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNationsReplyMultiError, or nil if none found.
func (m *GetNationsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNationsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetNationsReplyMultiError(errors)
	}

	return nil
}

// GetNationsReplyMultiError is an error wrapping multiple validation errors
// returned by GetNationsReply.ValidateAll() if the designated constraints
// aren't met.
type GetNationsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNationsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNationsReplyMultiError) AllErrors() []error { return m }

// GetNationsReplyValidationError is the validation error returned by
// GetNationsReply.Validate if the designated constraints aren't met.
type GetNationsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNationsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNationsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNationsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNationsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNationsReplyValidationError) ErrorName() string { return "GetNationsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetNationsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNationsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNationsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNationsReplyValidationError{}

// Validate checks the field values on Joblevels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Joblevels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Joblevels with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JoblevelsMultiError, or nil
// if none found.
func (m *Joblevels) ValidateAll() error {
	return m.validate(true)
}

func (m *Joblevels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for TitleLevel

	// no validation rules for CreateDate

	// no validation rules for Enabled

	if len(errors) > 0 {
		return JoblevelsMultiError(errors)
	}

	return nil
}

// JoblevelsMultiError is an error wrapping multiple validation errors returned
// by Joblevels.ValidateAll() if the designated constraints aren't met.
type JoblevelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoblevelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoblevelsMultiError) AllErrors() []error { return m }

// JoblevelsValidationError is the validation error returned by
// Joblevels.Validate if the designated constraints aren't met.
type JoblevelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoblevelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoblevelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoblevelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoblevelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoblevelsValidationError) ErrorName() string { return "JoblevelsValidationError" }

// Error satisfies the builtin error interface
func (e JoblevelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoblevels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoblevelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoblevelsValidationError{}

// Validate checks the field values on GetJoblevelsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetJoblevelsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJoblevelsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJoblevelsReplyMultiError, or nil if none found.
func (m *GetJoblevelsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJoblevelsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJoblevelsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJoblevelsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJoblevelsReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetJoblevelsReplyMultiError(errors)
	}

	return nil
}

// GetJoblevelsReplyMultiError is an error wrapping multiple validation errors
// returned by GetJoblevelsReply.ValidateAll() if the designated constraints
// aren't met.
type GetJoblevelsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJoblevelsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJoblevelsReplyMultiError) AllErrors() []error { return m }

// GetJoblevelsReplyValidationError is the validation error returned by
// GetJoblevelsReply.Validate if the designated constraints aren't met.
type GetJoblevelsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJoblevelsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJoblevelsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJoblevelsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJoblevelsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJoblevelsReplyValidationError) ErrorName() string {
	return "GetJoblevelsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetJoblevelsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJoblevelsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJoblevelsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJoblevelsReplyValidationError{}

// Validate checks the field values on GetPoliticsstatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPoliticsstatusReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPoliticsstatusReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPoliticsstatusReplyMultiError, or nil if none found.
func (m *GetPoliticsstatusReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPoliticsstatusReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetPoliticsstatusReplyMultiError(errors)
	}

	return nil
}

// GetPoliticsstatusReplyMultiError is an error wrapping multiple validation
// errors returned by GetPoliticsstatusReply.ValidateAll() if the designated
// constraints aren't met.
type GetPoliticsstatusReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPoliticsstatusReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPoliticsstatusReplyMultiError) AllErrors() []error { return m }

// GetPoliticsstatusReplyValidationError is the validation error returned by
// GetPoliticsstatusReply.Validate if the designated constraints aren't met.
type GetPoliticsstatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPoliticsstatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPoliticsstatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPoliticsstatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPoliticsstatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPoliticsstatusReplyValidationError) ErrorName() string {
	return "GetPoliticsstatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPoliticsstatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPoliticsstatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPoliticsstatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPoliticsstatusReplyValidationError{}

// Validate checks the field values on Department with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Department) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Department with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DepartmentMultiError, or
// nil if none found.
func (m *Department) ValidateAll() error {
	return m.validate(true)
}

func (m *Department) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ParentId

	// no validation rules for DepPath

	// no validation rules for Enabled

	// no validation rules for IsParent

	if len(errors) > 0 {
		return DepartmentMultiError(errors)
	}

	return nil
}

// DepartmentMultiError is an error wrapping multiple validation errors
// returned by Department.ValidateAll() if the designated constraints aren't met.
type DepartmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DepartmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DepartmentMultiError) AllErrors() []error { return m }

// DepartmentValidationError is the validation error returned by
// Department.Validate if the designated constraints aren't met.
type DepartmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentValidationError) ErrorName() string { return "DepartmentValidationError" }

// Error satisfies the builtin error interface
func (e DepartmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentValidationError{}

// Validate checks the field values on GetDepsReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDepsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDepsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDepsReplyMultiError, or
// nil if none found.
func (m *GetDepsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDepsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDepsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDepsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDepsReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDepsReplyMultiError(errors)
	}

	return nil
}

// GetDepsReplyMultiError is an error wrapping multiple validation errors
// returned by GetDepsReply.ValidateAll() if the designated constraints aren't met.
type GetDepsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDepsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDepsReplyMultiError) AllErrors() []error { return m }

// GetDepsReplyValidationError is the validation error returned by
// GetDepsReply.Validate if the designated constraints aren't met.
type GetDepsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepsReplyValidationError) ErrorName() string { return "GetDepsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetDepsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepsReplyValidationError{}

// Validate checks the field values on Position with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Position) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Position with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PositionMultiError, or nil
// if none found.
func (m *Position) ValidateAll() error {
	return m.validate(true)
}

func (m *Position) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CreateDate

	// no validation rules for Enabled

	if len(errors) > 0 {
		return PositionMultiError(errors)
	}

	return nil
}

// PositionMultiError is an error wrapping multiple validation errors returned
// by Position.ValidateAll() if the designated constraints aren't met.
type PositionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionMultiError) AllErrors() []error { return m }

// PositionValidationError is the validation error returned by
// Position.Validate if the designated constraints aren't met.
type PositionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionValidationError) ErrorName() string { return "PositionValidationError" }

// Error satisfies the builtin error interface
func (e PositionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPosition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionValidationError{}

// Validate checks the field values on GetPositionsReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPositionsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPositionsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPositionsReplyMultiError, or nil if none found.
func (m *GetPositionsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPositionsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPositionsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPositionsReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPositionsReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPositionsReplyMultiError(errors)
	}

	return nil
}

// GetPositionsReplyMultiError is an error wrapping multiple validation errors
// returned by GetPositionsReply.ValidateAll() if the designated constraints
// aren't met.
type GetPositionsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPositionsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPositionsReplyMultiError) AllErrors() []error { return m }

// GetPositionsReplyValidationError is the validation error returned by
// GetPositionsReply.Validate if the designated constraints aren't met.
type GetPositionsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPositionsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPositionsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPositionsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPositionsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPositionsReplyValidationError) ErrorName() string {
	return "GetPositionsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPositionsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPositionsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPositionsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPositionsReplyValidationError{}

// Validate checks the field values on GetMaxWorkIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMaxWorkIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMaxWorkIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMaxWorkIDReplyMultiError, or nil if none found.
func (m *GetMaxWorkIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMaxWorkIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxWorkId

	if len(errors) > 0 {
		return GetMaxWorkIDReplyMultiError(errors)
	}

	return nil
}

// GetMaxWorkIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetMaxWorkIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetMaxWorkIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMaxWorkIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMaxWorkIDReplyMultiError) AllErrors() []error { return m }

// GetMaxWorkIDReplyValidationError is the validation error returned by
// GetMaxWorkIDReply.Validate if the designated constraints aren't met.
type GetMaxWorkIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMaxWorkIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMaxWorkIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMaxWorkIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMaxWorkIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMaxWorkIDReplyValidationError) ErrorName() string {
	return "GetMaxWorkIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetMaxWorkIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMaxWorkIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMaxWorkIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMaxWorkIDReplyValidationError{}

// Validate checks the field values on GetExportReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetExportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExportReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetExportReplyMultiError,
// or nil if none found.
func (m *GetExportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Export

	if len(errors) > 0 {
		return GetExportReplyMultiError(errors)
	}

	return nil
}

// GetExportReplyMultiError is an error wrapping multiple validation errors
// returned by GetExportReply.ValidateAll() if the designated constraints
// aren't met.
type GetExportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExportReplyMultiError) AllErrors() []error { return m }

// GetExportReplyValidationError is the validation error returned by
// GetExportReply.Validate if the designated constraints aren't met.
type GetExportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExportReplyValidationError) ErrorName() string { return "GetExportReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetExportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExportReplyValidationError{}
